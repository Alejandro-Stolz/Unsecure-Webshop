package backend.main.java;

import backend.main.java.database.DataAccessAdminPanel;
import backend.main.java.database.DataAccessShopDatabase;
import backend.main.java.models.UserVulnerability;

import java.util.concurrent.TimeUnit;

public class VulnerabilityCheck {

    public UserVulnerability checkSqlInjection(String sql){
        UserVulnerability user =null;
        DataAccessShopDatabase dasd = new DataAccessShopDatabase();
        if(sql==null){
            return user;
        }
        else if(sql.contains("DROP") || sql.contains("drop")){
            return user = new UserVulnerability();
        }
        switch(LogicAdminPanel.level) {
            case 1:
                if(sql.contains("' OR 1=1;#") || sql.contains("'OR1=1;#") || sql.contains("' OR1=1;#") || sql.contains("'OR 1=1;#")||
                        sql.contains("' AND 1=1;#") || sql.contains("'AND1=1;#") || sql.contains("' AND1=1;#") || sql.contains("'AND 1=1;#")){
                    user= dasd.getUserInformationVulnerability(1);
                    String password =dasd.getPassword(1);
                    user.setDescription(password);
                }
                break;
            case 2:
                sql=this.changeInputForSqlInjectionLevel2(sql);
                if(sql.contains("' OR 1=1;#") || sql.contains("'OR1=1;#") || sql.contains("' OR1=1;#") || sql.contains("'OR 1=1;#")||
                        sql.contains("' AND 1=1;#") || sql.contains("'AND1=1;#") || sql.contains("' AND1=1;#") || sql.contains("'AND 1=1;#")){
                    user= dasd.getUserInformationVulnerability(2);
                    String password =dasd.getPassword(2);
                    user.setDescription(password);
                }
                break;
            case 3:
                sql=this.changeInputForSqlInjectionLevel2(sql);
                if(sql.contains("' OR 1=1;#") || sql.contains("'OR1=1;#") || sql.contains("' OR1=1;#") || sql.contains("'OR 1=1;#")){
                    sql=this.changeInputForSqlInjectionLevel3(sql);
                    if(sql.contains("' OR 1=1;#") || sql.contains("'OR1=1;#") || sql.contains("' OR1=1;#") || sql.contains("'OR 1=1;#")||
                            sql.contains("' AND 1=1;#") || sql.contains("'AND1=1;#") || sql.contains("' AND1=1;#") || sql.contains("'AND 1=1;#")){
                        user= dasd.getUserInformationVulnerability(3);
                        String password =dasd.getPassword(3);
                        user.setPassword(password);
                    }
                }
                if(sql.equals("' UNION SELECT email, password FROM user;#") ||sql.equals("'UNION SELECT email, password FROM user;#")
                        || sql.equals("'UNION SELECT password, email FROM user;#") || sql.equals("' UNION SELECT password, email FROM user;#")){
                    user= dasd.getUserInformationVulnerability(3);
                    String password =dasd.getPassword(3);
                    user.setPassword(password);
                }
                break;
        }
        return user;
    }

    public boolean checkBlindSqlInjection(String sql){
        if(sql.contains("SLEEP(") || sql.contains("BENCHMARK(") || sql.contains("SLEEP (") || sql.contains("BENCHMARK (")){
            try {
                TimeUnit.SECONDS.sleep(15);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        else if(sql.contains("; WAIT FOR DELAY") || sql.contains(";WAIT FOR DELAY") || sql.contains("; WAIT FOR TIME") || sql.contains(";WAIT FOR TIME")){
            try {
                TimeUnit.SECONDS.sleep(15);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    private String changeInputForSqlInjectionLevel2(String sql){
        while(true){
            if(sql.charAt(0)=='\''){
                sql=sql.substring(1,sql.length());
            }
            if(sql.charAt(sql.length()-1)=='#'){
                sql=sql.substring(0, sql.length()-1);
            }
            if(sql.charAt(0)!='\'' && sql.charAt(sql.length()-1)!='#'){
                break;
            }
        }
        return sql;
    }

    private String changeInputForSqlInjectionLevel3(String sql){
        if(sql.contains("1=1")){
            sql=sql.replace("1=1","");
        }
        return sql;
    }

    public static void main (String [] args){
        VulnerabilityCheck vc = new VulnerabilityCheck();

    }
}
