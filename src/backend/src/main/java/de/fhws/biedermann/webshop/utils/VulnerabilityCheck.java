package de.fhws.biedermann.webshop.utils;

import de.fhws.biedermann.webshop.database.DataAccessShopDatabase;
import de.fhws.biedermann.webshop.models.UserVulnerability;

import java.util.concurrent.TimeUnit;

public class VulnerabilityCheck {

    public UserVulnerability checkSqlInjection(String sql){
        UserVulnerability user =null;
        DataAccessShopDatabase dasd = new DataAccessShopDatabase();
        if(sql==null){
            return user;
        }
        else if(sql.contains("DROP") || sql.contains("drop")){
            return user = new UserVulnerability();
        }
        sql= sql.toLowerCase();
        switch(LogicAdminPanel.getInstance().level) {
            case 1:
                if(sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                        sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
                    user= dasd.getUserInformationVulnerability(1);
                    String password =dasd.getPassword(1);
                    user.setDescription(password);
                }
                break;
            case 2:
                sql=this.changeInputForSqlInjectionLevel2(sql);
                if(sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                        sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
                    user= dasd.getUserInformationVulnerability(2);
                    String password =dasd.getPassword(2);
                    user.setDescription(password);
                }
                break;
            case 3:
                sql=this.changeInputForSqlInjectionLevel2(sql);
                if(sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                        sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
                    sql=this.changeInputForSqlInjectionLevel3(sql);
                    if(sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                            sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
                        user= dasd.getUserInformationVulnerability(3);
                        String password =dasd.getPassword(3);
                        user.setPassword(password);
                    }
                }
                if(sql.equals("' union select email, password from user;#") ||sql.equals("'union select email, password from user;#")
                        || sql.equals("'union select password, email from user;#") || sql.equals("' union select password, email from user;#")){
                    user= dasd.getUserInformationVulnerability(3);
                    String password =dasd.getPassword(3);
                    user.setPassword(password);
                }
                break;
        }
        return user;
    }

    public boolean checkBlindSqlInjection(String sql){
        if(sql==null){
            return false;
        }
        else if(sql.contains("SLEEP(") || sql.contains("BENCHMARK(") || sql.contains("SLEEP (") || sql.contains("BENCHMARK (")){
            try {
                TimeUnit.SECONDS.sleep(15);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        else if(sql.contains("; WAIT FOR DELAY") || sql.contains(";WAIT FOR DELAY") || sql.contains("; WAIT FOR TIME") || sql.contains(";WAIT FOR TIME")){
            try {
                TimeUnit.SECONDS.sleep(15);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    private String changeInputForSqlInjectionLevel2(String sql){
        while(true){
            if(sql.charAt(0)=='\''){
                sql=sql.substring(1,sql.length());
            }
            if(sql.charAt(sql.length()-1)=='#'){
                sql=sql.substring(0, sql.length()-1);
            }
            if(sql.charAt(0)!='\'' && sql.charAt(sql.length()-1)!='#'){
                break;
            }
        }
        return sql;
    }

    private String changeInputForSqlInjectionLevel3(String sql){
        if(sql.contains("1=1")){
            sql=sql.replace("1=1","");
        }
        return sql;
    }

    public boolean checkXSS(String input){
        input= input.toLowerCase();
        if(input.equals("")){
            return false;
        }
        switch(LogicAdminPanel.getInstance().level){
            case 1:
                if(input.contains("<script>") && input.contains("</script>")){
                    return true;
                }
                break;
            case 2:
                input= this.changeInputForXssLevel2(input);
                if(input.contains("<script>") && input.contains("</script>")){
                    return true;
                }
                break;
            case 3:
                if(input.contains("<script>") && input.contains("</script>")){
                    input = this.changeInputForXssLevel2(input);
                    input =  this.changeInputForXssLevel3(input);
                    if(input.contains("<script>") && input.contains("</script>")){
                        return true;
                    }
                }
                else if(input.contains("<img src=") && input.contains("/>")){
                    return true;
                }
                break;
        }
        return false;
    }

    private String changeInputForXssLevel2(String input){
        input=input.replace("script","");
        return input;
    }

    private String changeInputForXssLevel3(String input){
        input= input.replaceFirst("<","");
        input= input.replaceFirst(">","");
        input= input.replaceFirst("/","");
        return input;
    }

    public static void main(String[] args){
        VulnerabilityCheck v = new VulnerabilityCheck();
        String x="<<scrscriptipt>>alert(1)<//scrscriptipt>";
        System.out.println(v.changeInputForXssLevel3(v.changeInputForXssLevel2(x)));
    }
}
